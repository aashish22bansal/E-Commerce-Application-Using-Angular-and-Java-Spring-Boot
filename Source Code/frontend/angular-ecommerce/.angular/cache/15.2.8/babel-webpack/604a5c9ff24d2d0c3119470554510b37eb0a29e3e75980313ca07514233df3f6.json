{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/product.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction ProductListComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"div\", 10)(2, \"a\", 11);\n    i0.ɵɵelement(3, \"img\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"a\", 11)(5, \"h1\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 13);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"currency\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"a\", 14);\n    i0.ɵɵtext(11, \"Add to Cart\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const tempProduct_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/products/\", tempProduct_r2.id, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", tempProduct_r2.imageUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/products/\", tempProduct_r2.id, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tempProduct_r2.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 5, tempProduct_r2.unitPrice, \"USD\"));\n  }\n}\nfunction ProductListComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" No products found. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ProductListComponent {\n  /**\r\n   *\r\n   * @param productService\r\n   * @param route\r\n   * Used for Injecting the Activated Route.\r\n   * It is the current active route that loaded the component which is useful for\r\n   * accessing route parameters because we need that for accessing the given category\r\n   * ID.\r\n   */\n  constructor(productService, route) {\n    this.productService = productService;\n    this.route = route;\n    // List of Products\n    this.products = [];\n    // Adding a property for currentCategoryId\n    this.currentCategoryId = 1;\n    // Search Mode\n    this.searchMode = false;\n    /**\r\n     * Adding new Properties for Pagination.\r\n     */\n    this.thePageNumber = 1; // Represents the current page number.\n    this.thePageSize = 10; // Represents the number of items per page.\n    this.theTotalElements = 0;\n    this.previousCategoryId = 1;\n  }\n  /**\r\n   * Here, we will need to subscribe on the paramMap for this given route.\r\n   */\n  ngOnInit() {\n    this.route.paramMap.subscribe(() => {\n      this.listProducts();\n    });\n    this.listProducts();\n  }\n  /**\r\n   * REFACTORING CODE\r\n   * In this method, we will call the search methods according to the Search Mode.\r\n   * So, we will first check if this Route has a Parameter for \"keyword\" because if it does\r\n   * have a keyword parameter, then it means we are performing a search (the \"keyword\" parameter\r\n   *  comes from the \"route\" configuration that we had setup earlier and also from the\r\n   * \"SearchComponent\" when the user enters the search data to navigate to the URL).\r\n   */\n  listProducts() {\n    this.searchMode = this.route.snapshot.paramMap.has('keyword');\n    if (this.searchMode) {\n      this.handleSearchProducts();\n    } else {\n      this.handleListProducts();\n    }\n  }\n  /**\r\n   * Adding new method called handleSearchProducts().\r\n   * In this, we first need to obtain the actual keyword (\"theKeyword\") that the user passed in,\r\n   * basically reading a parameter. Then, we will search for products using that given\r\n   * keyword.\r\n   */\n  handleSearchProducts() {\n    const theKeyword = this.route.snapshot.paramMap.get('keyword'); // Note the Exclamation Mark.\n    // Search for Products using theKeyword\n    this.productService.searchProducts(theKeyword).subscribe(data => {\n      this.products = data;\n    });\n  }\n  /**\r\n   * Adding new method called handleListProducts().\r\n   * Here, we will check if the \"id\" parameter is available just to know if we can use\r\n   * that value or if we need to use the default value.\r\n   * We will first check if there is a value being passed or not. If there is a value\r\n   * being passed, then we will fetch that value and convert that value into a number. It\r\n   * is possible that the value in the currentCategoryId variable might be a null value, so\r\n   * we will need to use the non-null assertion operator (!) which tells the compiler that\r\n   * the object is not null. This helps in resolving the compiler errors. If there is no\r\n   * value, then we will return the default value.\r\n   * After this, we will obtain the products for that value of the Category ID. For this,\r\n   * we will pass the this.currentCategoryId to the getProductList() method which is mapped\r\n   * to product.service.ts file.\r\n   *\r\n   *\r\n   * For the Concept of Pagination, we will have to check if we have a different category than\r\n   * previous.\r\n   * NOTE: Angular will reuse a component if it is currently being viewed. Angular may not always\r\n   *       create a new component everytime. If a component is currently being used in the browser,\r\n   *       then Angular will simply reuse that component, so to handle it we will need to perform\r\n   *       some additional operations.\r\n   *       This needs to be done to reset the page number or if resetting the page number is required.\r\n   *       If we have a different Category ID, then we will reset the Page Number to 1.\r\n   */\n  handleListProducts() {\n    // obtaining the passed value\n    const hasCategoryId = this.route.snapshot.paramMap.has('id'); // This will return true if the parameter is available.\n    // checking based on the boolean value obtained above\n    if (hasCategoryId) {\n      // reading the Category ID and then converting it to a number using the \"+\" symbol\n      this.currentCategoryId = +this.route.snapshot.paramMap.get('id');\n    } else {\n      // since the Category ID is not available, we will return the default value of 1\n      this.currentCategoryId = 1;\n    }\n    // If we have a different Category ID, then we will reset the Page Number to 1.\n    if (this.previousCategoryId != this.currentCategoryId) {\n      this.thePageNumber = 1;\n    }\n    // Now, we need to keep track of the Category ID.\n    this.previousCategoryId = this.currentCategoryId;\n    console.log(`currentCategoryId=${this.currentCategoryId}, thePageNumber=${this.thePageNumber}`);\n    // Now, we need to obtain the products for the given Category ID by calling the service getProductListPaginate() as:\n    //  Calling the ProductService and subscribing to the data.\n    //  Fetching the products for the given Category ID.\n    this.productService.getProductListPaginate(this.thePageNumber - 1,\n    // This is required because in Angular, pages are 1-based whereas in Spring Boot, pages are 0-based\n    this.thePageSize, this.currentCategoryId).subscribe(\n    // Mapping data from the JSON Data to the Property Response\n    // Mapping data from the JSON Data to the Property Response\n    data => {\n      /**\r\n       * In this, on the LHS, we have the properties defined in the class and in the RHS, we have the data from Spring Data REST JSON\r\n       * which is from the Interface GetResponseProducts.\r\n       */\n      this.products = data._embedded.products;\n      this.thePageNumber = data.page.number + 1; // This is required because in Angular, pages are 1-based whereas in Spring Boot, pages are 0-based\n      this.thePageSize = data.page.size;\n      this.theTotalElements = data.page.totalElements;\n    });\n  }\n}\nProductListComponent.ɵfac = function ProductListComponent_Factory(t) {\n  return new (t || ProductListComponent)(i0.ɵɵdirectiveInject(i1.ProductService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nProductListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ProductListComponent,\n  selectors: [[\"app-product-list\"]],\n  decls: 12,\n  vars: 2,\n  consts: [[1, \"main-content\"], [1, \"section-content\", \"section-content-p30\"], [1, \"container-fluid\"], [1, \"row\"], [\"class\", \"col-md-3\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"alert alert-warning col-md-12\", \"role\", \"alert\", 4, \"ngIf\"], [1, \"footer-pagination\"], [1, \"col-md-6\"], [1, \"col-md-9\"], [1, \"col-md-3\"], [1, \"product-box\"], [3, \"routerLink\"], [1, \"img-responsive\", 3, \"src\"], [1, \"price\"], [\"href\", \"#\", 1, \"primary-btn\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\", \"col-md-12\"]],\n  template: function ProductListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵtemplate(4, ProductListComponent_div_4_Template, 12, 8, \"div\", 4);\n      i0.ɵɵtemplate(5, ProductListComponent_div_5_Template, 2, 0, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 6)(7, \"div\", 3);\n      i0.ɵɵelement(8, \"div\", 7);\n      i0.ɵɵelementStart(9, \"div\", 7)(10, \"div\", 3);\n      i0.ɵɵelement(11, \"div\", 8);\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.products);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.products == null ? null : ctx.products.length) == 0);\n    }\n  },\n  dependencies: [i2.RouterLink, i3.NgForOf, i3.NgIf, i3.CurrencyPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","ProductListComponent","constructor","productService","route","ngOnInit","paramMap","subscribe","listProducts","searchMode","snapshot","has","handleSearchProducts","handleListProducts","theKeyword","get","searchProducts","data","products","hasCategoryId","currentCategoryId","previousCategoryId","thePageNumber","console","log","getProductListPaginate","thePageSize","_embedded","page","number","size","theTotalElements","totalElements","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\aashi\\GitHub\\My Repositories\\E-Commerce-Application-Using-Angular-and-Java-Spring-Boot\\Source Code\\frontend\\angular-ecommerce\\src\\app\\components\\product-list\\product-list-grid.component.html","C:\\Users\\aashi\\GitHub\\My Repositories\\E-Commerce-Application-Using-Angular-and-Java-Spring-Boot\\Source Code\\frontend\\angular-ecommerce\\src\\app\\components\\product-list\\product-list.component.ts"],"sourcesContent":["<div class=\"main-content\">\r\n    <div class=\"section-content section-content-p30\">\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n                <!-- Loop over the collection of products. -->\r\n                <div *ngFor=\"let tempProduct of products\" class=\"col-md-3\">\r\n                    <div class=\"product-box\">\r\n                        <a routerLink=\"/products/{{ tempProduct.id }}\">\r\n                            <img src=\"{{ tempProduct.imageUrl }}\" class=\"img-responsive\" />\r\n                        </a>\r\n                        <a routerLink=\"/products/{{ tempProduct.id }}\">\r\n                            <h1>{{ tempProduct.name }}</h1>\r\n                        </a>\r\n                        <div class=\"price\">{{ tempProduct.unitPrice | currency:'USD' }}</div>\r\n                        <a href=\"#\" class=\"primary-btn\">Add to Cart</a>\r\n                    </div>\r\n                </div>\r\n                <!-- If no products are found, then we shall display a message. -->\r\n                <div *ngIf=\"products?.length == 0\" class=\"alert alert-warning col-md-12\" role=\"alert\">\r\n                    <!-- In the above code, the \"role\" tag provides Accessibility. -->\r\n                    No products found.\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Adding Pagination as a Footer - Begin. -->\r\n            <div class=\"footer-pagination\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-6\"></div>\r\n                    \r\n                    <div class=\"col-md-6\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-9\" style=\"\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- Adding Pagination as a Footer - End. -->\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Product } from 'src/app/common/product';\nimport { ProductService } from 'src/app/services/product.service';\nimport { Route, ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list-grid.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit{\n  // List of Products\n  products: Product[] = [];\n\n  // Adding a property for currentCategoryId\n  currentCategoryId: number = 1;\n\n  // Search Mode\n  searchMode: boolean = false;\n\n  /**\n   * Adding new Properties for Pagination.\n   */\n  thePageNumber: number = 1; // Represents the current page number.\n  thePageSize: number = 10; // Represents the number of items per page.\n  theTotalElements: number = 0;\n  previousCategoryId: number = 1;\n\n\n  /**\n   * \n   * @param productService \n   * @param route \n   * Used for Injecting the Activated Route.\n   * It is the current active route that loaded the component which is useful for \n   * accessing route parameters because we need that for accessing the given category\n   * ID.\n   */\n  constructor(private productService: ProductService,\n              private route: ActivatedRoute\n             ){}\n  \n  /**\n   * Here, we will need to subscribe on the paramMap for this given route.\n   */\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(() => {\n      this.listProducts();\n    });\n    this.listProducts();\n  }\n\n  /**\n   * REFACTORING CODE\n   * In this method, we will call the search methods according to the Search Mode.\n   * So, we will first check if this Route has a Parameter for \"keyword\" because if it does \n   * have a keyword parameter, then it means we are performing a search (the \"keyword\" parameter\n   *  comes from the \"route\" configuration that we had setup earlier and also from the \n   * \"SearchComponent\" when the user enters the search data to navigate to the URL).\n   */\n  listProducts(){\n    this.searchMode = this.route.snapshot.paramMap.has('keyword');\n\n    if(this.searchMode){\n      this.handleSearchProducts();\n    }\n    else{\n      this.handleListProducts();\n    }\n  }\n\n  /**\n   * Adding new method called handleSearchProducts().\n   * In this, we first need to obtain the actual keyword (\"theKeyword\") that the user passed in,\n   * basically reading a parameter. Then, we will search for products using that given \n   * keyword.\n   */\n  handleSearchProducts(){\n    const theKeyword: string = this.route.snapshot.paramMap.get('keyword')!; // Note the Exclamation Mark.\n\n    // Search for Products using theKeyword\n    this.productService.searchProducts(theKeyword).subscribe(\n      data => {\n        this.products = data;\n      }\n    );\n  }\n\n  /**\n   * Adding new method called handleListProducts().\n   * Here, we will check if the \"id\" parameter is available just to know if we can use \n   * that value or if we need to use the default value.\n   * We will first check if there is a value being passed or not. If there is a value \n   * being passed, then we will fetch that value and convert that value into a number. It\n   * is possible that the value in the currentCategoryId variable might be a null value, so\n   * we will need to use the non-null assertion operator (!) which tells the compiler that\n   * the object is not null. This helps in resolving the compiler errors. If there is no\n   * value, then we will return the default value.\n   * After this, we will obtain the products for that value of the Category ID. For this, \n   * we will pass the this.currentCategoryId to the getProductList() method which is mapped\n   * to product.service.ts file.\n   * \n   * \n   * For the Concept of Pagination, we will have to check if we have a different category than\n   * previous.\n   * NOTE: Angular will reuse a component if it is currently being viewed. Angular may not always\n   *       create a new component everytime. If a component is currently being used in the browser,\n   *       then Angular will simply reuse that component, so to handle it we will need to perform\n   *       some additional operations.\n   *       This needs to be done to reset the page number or if resetting the page number is required.\n   *       If we have a different Category ID, then we will reset the Page Number to 1.\n   */\n  handleListProducts(){\n    // obtaining the passed value\n    const hasCategoryId: boolean = this.route.snapshot.paramMap.has('id'); // This will return true if the parameter is available.\n\n    // checking based on the boolean value obtained above\n    if(hasCategoryId){\n      // reading the Category ID and then converting it to a number using the \"+\" symbol\n      this.currentCategoryId = +this.route.snapshot.paramMap.get('id')!;\n    }\n    else{\n      // since the Category ID is not available, we will return the default value of 1\n      this.currentCategoryId = 1;\n    }\n\n    // If we have a different Category ID, then we will reset the Page Number to 1.\n    if(this.previousCategoryId != this.currentCategoryId){\n      this.thePageNumber = 1;\n    }\n    // Now, we need to keep track of the Category ID.\n    this.previousCategoryId = this.currentCategoryId;\n    console.log(`currentCategoryId=${this.currentCategoryId}, thePageNumber=${this.thePageNumber}`);\n    // Now, we need to obtain the products for the given Category ID by calling the service getProductListPaginate() as:\n    //  Calling the ProductService and subscribing to the data.\n    //  Fetching the products for the given Category ID.\n    this.productService.getProductListPaginate(this.thePageNumber-1, // This is required because in Angular, pages are 1-based whereas in Spring Boot, pages are 0-based\n                                               this.thePageSize, \n                                               this.currentCategoryId\n                                              ).subscribe( // Mapping data from the JSON Data to the Property Response\n      data => {\n        /**\n         * In this, on the LHS, we have the properties defined in the class and in the RHS, we have the data from Spring Data REST JSON\n         * which is from the Interface GetResponseProducts.\n         */\n        this.products = data._embedded.products;\n        this.thePageNumber = data.page.number + 1; // This is required because in Angular, pages are 1-based whereas in Spring Boot, pages are 0-based\n        this.thePageSize = data.page.size;\n        this.theTotalElements = data.page.totalElements;\n      }\n    )\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}