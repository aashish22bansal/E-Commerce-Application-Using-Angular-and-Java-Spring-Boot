{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/product.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction ProductListComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6);\n    i0.ɵɵelement(2, \"img\", 7);\n    i0.ɵɵelementStart(3, \"h1\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 8);\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"currency\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"a\", 9);\n    i0.ɵɵtext(9, \"Add to Cart\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const tempProduct_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"src\", tempProduct_r1.imageUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tempProduct_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 3, tempProduct_r1.unitPrice, \"USD\"));\n  }\n}\nexport class ProductListComponent {\n  /**\r\n   *\r\n   * @param productService\r\n   * @param route\r\n   * Used for Injecting the Activated Route.\r\n   * It is the current active route that loaded the component which is useful for\r\n   * accessing route parameters because we need that for accessing the given category\r\n   * ID.\r\n   */\n  constructor(productService, route) {\n    this.productService = productService;\n    this.route = route;\n    // List of Products\n    this.products = [];\n    // Adding a property for currentCategoryId\n    this.currentCategoryId = 1;\n    // Search Mode\n    this.searchMode = false;\n  }\n  /**\r\n   * Here, we will need to subscribe on the paramMap for this given route.\r\n   */\n  ngOnInit() {\n    this.route.paramMap.subscribe(() => {\n      this.listProducts();\n    });\n    this.listProducts();\n  }\n  /**\r\n   \r\n   */\n  listProducts() {\n    // obtaining the passed value\n    const hasCategoryId = this.route.snapshot.paramMap.has('id'); // This will return true if the parameter is available.\n    // checking based on the boolean value obtained above\n    if (hasCategoryId) {\n      // reading the Category ID and then converting it to a number using the \"+\" symbol\n      this.currentCategoryId = +this.route.snapshot.paramMap.get('id');\n    } else {\n      // since the Category ID is not available, we will return the default value of 1\n      this.currentCategoryId = 1;\n    }\n    // Calling the ProductService and subscribing to the data.\n    // Fetching the products for the given Category ID.\n    this.productService.getProductList(this.currentCategoryId).subscribe(data => {\n      this.products = data;\n    });\n  }\n  /**\r\n   * Adding new method called handleListProducts()\r\n   */\n  handleListProducts() {}\n}\nProductListComponent.ɵfac = function ProductListComponent_Factory(t) {\n  return new (t || ProductListComponent)(i0.ɵɵdirectiveInject(i1.ProductService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nProductListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ProductListComponent,\n  selectors: [[\"app-product-list\"]],\n  decls: 5,\n  vars: 1,\n  consts: [[1, \"main-content\"], [1, \"section-content\", \"section-content-p30\"], [1, \"container-fluid\"], [1, \"row\"], [\"class\", \"col-md-3\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-3\"], [1, \"product-box\"], [1, \"img-responsive\", 3, \"src\"], [1, \"price\"], [\"href\", \"#\", 1, \"primary-btn\"]],\n  template: function ProductListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵtemplate(4, ProductListComponent_div_4_Template, 10, 6, \"div\", 4);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.products);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.CurrencyPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;IAKgBA,8BAA2D;IAEnDA,yBAA+D;IAC/DA,0BAAI;IAAAA,YAAsB;IAAAA,iBAAK;IAC/BA,8BAAmB;IAAAA,YAA4C;;IAAAA,iBAAM;IACrEA,4BAAgC;IAAAA,2BAAW;IAAAA,iBAAI;;;;IAH1CA,eAAgC;IAAhCA,0EAAgC;IACjCA,eAAsB;IAAtBA,yCAAsB;IACPA,eAA4C;IAA5CA,2EAA4C;;;ACCvF,OAAM,MAAOC,oBAAoB;EAU/B;;;;;;;;;EASAC,YAAoBC,cAA8B,EAC9BC,KAAqB;IADrB,mBAAc,GAAdD,cAAc;IACd,UAAK,GAALC,KAAK;IAnBzB;IACA,aAAQ,GAAc,EAAE;IAExB;IACA,sBAAiB,GAAW,CAAC;IAE7B;IACA,eAAU,GAAY,KAAK;EAad;EAEb;;;EAGAC,QAAQ;IACN,IAAI,CAACD,KAAK,CAACE,QAAQ,CAACC,SAAS,CAAC,MAAK;MACjC,IAAI,CAACC,YAAY,EAAE;IACrB,CAAC,CAAC;IACF,IAAI,CAACA,YAAY,EAAE;EACrB;EAEA;;;EAGAA,YAAY;IACV;IACA,MAAMC,aAAa,GAAY,IAAI,CAACL,KAAK,CAACM,QAAQ,CAACJ,QAAQ,CAACK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAEvE;IACA,IAAGF,aAAa,EAAC;MACf;MACA,IAAI,CAACG,iBAAiB,GAAG,CAAC,IAAI,CAACR,KAAK,CAACM,QAAQ,CAACJ,QAAQ,CAACO,GAAG,CAAC,IAAI,CAAE;KAClE,MACG;MACF;MACA,IAAI,CAACD,iBAAiB,GAAG,CAAC;;IAG5B;IACA;IACA,IAAI,CAACT,cAAc,CAACW,cAAc,CAAC,IAAI,CAACF,iBAAiB,CAAC,CAACL,SAAS,CAClEQ,IAAI,IAAG;MACL,IAAI,CAACC,QAAQ,GAAGD,IAAI;IACtB,CAAC,CACF;EACH;EAEA;;;EAGAE,kBAAkB,IAAG;;AA9DVhB,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAiB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDVjCtB,8BAA0B;MAKVA,sEAOM;MACVA,iBAAM;;;MAR2BA,eAAW;MAAXA,sCAAW","names":["i0","ProductListComponent","constructor","productService","route","ngOnInit","paramMap","subscribe","listProducts","hasCategoryId","snapshot","has","currentCategoryId","get","getProductList","data","products","handleListProducts","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\aashi\\GitHub\\My Repositories\\E-Commerce-Application-Using-Angular-and-Java-Spring-Boot\\Source Code\\frontend\\angular-ecommerce\\src\\app\\components\\product-list\\product-list-grid.component.html","C:\\Users\\aashi\\GitHub\\My Repositories\\E-Commerce-Application-Using-Angular-and-Java-Spring-Boot\\Source Code\\frontend\\angular-ecommerce\\src\\app\\components\\product-list\\product-list.component.ts"],"sourcesContent":["<div class=\"main-content\">\r\n    <div class=\"section-content section-content-p30\">\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n                <!-- Loop over the collection of products. -->\r\n                <div *ngFor=\"let tempProduct of products\" class=\"col-md-3\">\r\n                    <div class=\"product-box\">\r\n                        <img src=\"{{ tempProduct.imageUrl }}\" class=\"img-responsive\" />\r\n                        <h1>{{ tempProduct.name }}</h1>\r\n                        <div class=\"price\">{{ tempProduct.unitPrice | currency:'USD' }}</div>\r\n                        <a href=\"#\" class=\"primary-btn\">Add to Cart</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Product } from 'src/app/common/product';\nimport { ProductService } from 'src/app/services/product.service';\nimport { Route, ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list-grid.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit{\n  // List of Products\n  products: Product[] = [];\n\n  // Adding a property for currentCategoryId\n  currentCategoryId: number = 1;\n\n  // Search Mode\n  searchMode: boolean = false;\n\n  /**\n   * \n   * @param productService \n   * @param route \n   * Used for Injecting the Activated Route.\n   * It is the current active route that loaded the component which is useful for \n   * accessing route parameters because we need that for accessing the given category\n   * ID.\n   */\n  constructor(private productService: ProductService,\n              private route: ActivatedRoute\n             ){}\n  \n  /**\n   * Here, we will need to subscribe on the paramMap for this given route.\n   */\n  ngOnInit(): void {\n    this.route.paramMap.subscribe(() => {\n      this.listProducts();\n    });\n    this.listProducts();\n  }\n\n  /**\n   \n   */\n  listProducts(){\n    // obtaining the passed value\n    const hasCategoryId: boolean = this.route.snapshot.paramMap.has('id'); // This will return true if the parameter is available.\n\n    // checking based on the boolean value obtained above\n    if(hasCategoryId){\n      // reading the Category ID and then converting it to a number using the \"+\" symbol\n      this.currentCategoryId = +this.route.snapshot.paramMap.get('id')!;\n    }\n    else{\n      // since the Category ID is not available, we will return the default value of 1\n      this.currentCategoryId = 1;\n    }\n\n    // Calling the ProductService and subscribing to the data.\n    // Fetching the products for the given Category ID.\n    this.productService.getProductList(this.currentCategoryId).subscribe(\n      data => {\n        this.products = data;\n      }\n    )\n  }\n\n  /**\n   * Adding new method called handleListProducts()\n   */\n  handleListProducts(){}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}