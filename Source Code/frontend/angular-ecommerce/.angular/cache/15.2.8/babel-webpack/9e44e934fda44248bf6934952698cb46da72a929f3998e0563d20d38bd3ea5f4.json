{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // defining the Base URL for the Spring Boot REST API\n    this.baseUrl = 'http://localhost:8080/api/products';\n    this.categoryUrl = 'http://localhost:8080/api/product-category';\n  }\n  /**\r\n   *\r\n   * @param theCategoryId\r\n   * @returns the value of the currentCategoryId mapped for the getProductList() method\r\n   */\n  getProductList(theCategoryId) {\n    // Building the URL based on Category ID because Spring Data REST would automatically\n    // expose the endpoint.\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n    // So, we will return the searchUrl instead of the baseUrl\n    return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n  }\n  searchProducts(theKeyword) {\n    throw new Error('Method not implemented.');\n  }\n  getProductCategories() {\n    return this.httpClient.get(this.categoryUrl).pipe(map(response => response._embedded.productCategory));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAJ9B;IACQ,YAAO,GAAG,oCAAoC;IAC9C,gBAAW,GAAG,4CAA4C;EAEpB;EAE9C;;;;;EAKAC,cAAc,CAACC,aAAqB;IAElC;IACA;IACA,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACC,OAAO,+BAA+BF,aAAa,EAAE;IAG/E;IACA,OAAO,IAAI,CAACF,UAAU,CAACK,GAAG,CAAsBF,SAAS,CAAC,CAACG,IAAI,CAC7DT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CAC7C;EACH;EAEAC,cAAc,CAACC,UAAkB;IAC/B,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEAC,oBAAoB;IAClB,OAAO,IAAI,CAACb,UAAU,CAACK,GAAG,CAA6B,IAAI,CAACS,WAAW,CAAC,CAACR,IAAI,CAC3ET,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACO,eAAe,CAAC,CACpD;EACH;;AAlCWjB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAkB,SAAdlB,cAAc;EAAAmB,YAFb;AAAM","names":["map","ProductService","constructor","httpClient","getProductList","theCategoryId","searchUrl","baseUrl","get","pipe","response","_embedded","products","searchProducts","theKeyword","Error","getProductCategories","categoryUrl","productCategory","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aashi\\GitHub\\My Repositories\\E-Commerce-Application-Using-Angular-and-Java-Spring-Boot\\Source Code\\frontend\\angular-ecommerce\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Product } from '../common/product';\nimport { map } from 'rxjs/operators';\nimport { ProductCategory } from '../common/product-category';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  // defining the Base URL for the Spring Boot REST API\n  private baseUrl = 'http://localhost:8080/api/products';\n  private categoryUrl = 'http://localhost:8080/api/product-category';\n\n  constructor(private httpClient: HttpClient) { }\n\n  /**\n   * \n   * @param theCategoryId \n   * @returns the value of the currentCategoryId mapped for the getProductList() method\n   */\n  getProductList(theCategoryId: number): Observable<Product[]>{\n\n    // Building the URL based on Category ID because Spring Data REST would automatically\n    // expose the endpoint.\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n    \n\n    // So, we will return the searchUrl instead of the baseUrl\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(\n      map(response => response._embedded.products)\n    );\n  }\n\n  searchProducts(theKeyword: string) {\n    throw new Error('Method not implemented.');\n  }\n\n  getProductCategories(): Observable<ProductCategory[]> {\n    return this.httpClient.get<GetResponseProductCategory>(this.categoryUrl).pipe(\n      map(response => response._embedded.productCategory)\n    );\n  }\n\n  \n}\n\ninterface GetResponseProducts{\n  _embedded: {\n    products: Product[];\n  }\n}\n\ninterface GetResponseProductCategory{\n  _embedded: {\n    productCategory: ProductCategory[];\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}