{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      // defining the Base URL for the Spring Boot REST API\n      this.baseUrl = 'http://localhost:8080/api/products';\n      this.categoryUrl = 'http://localhost:8080/api/product-category';\n    }\n    /**\r\n     *\r\n     * @param theCategoryId\r\n     * @returns the value of the currentCategoryId mapped for the getProductList() method\r\n     */\n    getProductList(theCategoryId) {\n      // Building the URL based on Category ID because Spring Data REST would automatically\n      // expose the endpoint.\n      const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n      console.log(\"within getProducts()\");\n      // So, we will return the searchUrl instead of the baseUrl\n      return this.getProducts(searchUrl); // Refactored the code\n    }\n    /**\r\n     * @param thePage: It is used to show the Page.\r\n     * @param thePageSize: It is used to represent the Page Size.\r\n     * @param theCategoryId: It represents the ID of the Category.\r\n     * @param GetResponseProducts: It is used because we need to access the data in the calling application.\r\n     * @returns the URL for required element along the concept of pagination.\r\n     *\r\n     * We know that the Spring Data REST supports pagination, so we just send the parameters for page and size in the URL.\r\n     */\n    getProductListPaginate(thePage, thePageSize, theCategoryId) {\n      // need to build URL based on Category ID, Page and Size of the Page.\n      const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}&page=${thePage}&size=${thePageSize}`;\n      return this.httpClient.get(searchUrl);\n    }\n    /**\r\n     * Query Method\r\n     * @param theKeyword: It is provided by the user.\r\n     */\n    searchProducts(theKeyword) {\n      // Building the URL based on \"theKeyword\" because Spring Data REST would automatically\n      // expose the endpoint.\n      const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\n      console.log(\"within searchProducts()\");\n      // So, we will return the searchUrl instead of the baseUrl\n      return this.getProducts(searchUrl);\n    }\n    /**\r\n     * @param thePage: It is used to show the Page.\r\n     * @param thePageSize: It is used to represent the Page Size.\r\n     * @param theKeyword: It represents the Keyword used to perform the search.\r\n     * @param GetResponseProducts: It is used because we need to access the data in the calling application.\r\n     * @returns the URL for required element along the concept of pagination.\r\n     *\r\n     * We know that the Spring Data REST supports pagination, so we just send the parameters for page and size in the URL.\r\n     *\r\n     * This method is used to Paginate the Keyword Search for the Application.\r\n     */\n    searchProductsPaginate(thePage, thePageSize, theKeyword) {\n      // need to build URL based on Category ID, Page and Size of the Page.\n      const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}&page=${thePage}&size=${thePageSize}`;\n      return this.httpClient.get(searchUrl);\n    }\n    getProducts(searchUrl) {\n      return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n    }\n    getProduct(theProductId) {\n      // Build URL based on Product ID\n      const productUrl = `${this.baseUrl}/${theProductId}`;\n      // Performing Search\n      return this.httpClient.get(productUrl);\n    }\n    getProductCategories() {\n      return this.httpClient.get(this.categoryUrl).pipe(map(response => response._embedded.productCategory));\n    }\n    static #_ = this.ɵfac = function ProductService_Factory(t) {\n      return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}