{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/product.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@ng-bootstrap/ng-bootstrap\";\nfunction ProductListComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"div\", 16)(2, \"a\", 17);\n    i0.ɵɵelement(3, \"img\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"a\", 17)(5, \"h1\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 19);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"currency\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function ProductListComponent_div_4_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const tempProduct_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.addToCart(tempProduct_r3));\n    });\n    i0.ɵɵtext(11, \"Add to Cart\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const tempProduct_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/products/\", tempProduct_r3.id, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", tempProduct_r3.imageUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/products/\", tempProduct_r3.id, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tempProduct_r3.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 5, tempProduct_r3.unitPrice, \"USD\"));\n  }\n}\nfunction ProductListComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" No products found. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let ProductListComponent = /*#__PURE__*/(() => {\n  class ProductListComponent {\n    /**\r\n     *\r\n     * @param productService\r\n     * @param route\r\n     * Used for Injecting the Activated Route.\r\n     * It is the current active route that loaded the component which is useful for\r\n     * accessing route parameters because we need that for accessing the given category\r\n     * ID.\r\n     */\n    constructor(productService, route) {\n      this.productService = productService;\n      this.route = route;\n      // List of Products\n      this.products = [];\n      // Adding a property for currentCategoryId\n      this.currentCategoryId = 1;\n      // Search Mode\n      this.searchMode = false;\n      /**\r\n       * Adding new Properties for Pagination.\r\n       */\n      this.thePageNumber = 1; // Represents the current page number.\n      this.thePageSize = 5; // Represents the number of items per page.\n      this.theTotalElements = 0;\n      this.previousCategoryId = 1;\n      /**\r\n       * Keyword Pagination Search\r\n       */\n      this.previousKeyword = \"\";\n    }\n    /**\r\n     * Here, we will need to subscribe on the paramMap for this given route.\r\n     */\n    ngOnInit() {\n      this.route.paramMap.subscribe(() => {\n        this.listProducts();\n      });\n      this.listProducts();\n    }\n    /**\r\n     * REFACTORING CODE\r\n     * In this method, we will call the search methods according to the Search Mode.\r\n     * So, we will first check if this Route has a Parameter for \"keyword\" because if it does\r\n     * have a keyword parameter, then it means we are performing a search (the \"keyword\" parameter\r\n     *  comes from the \"route\" configuration that we had setup earlier and also from the\r\n     * \"SearchComponent\" when the user enters the search data to navigate to the URL).\r\n     */\n    listProducts() {\n      this.searchMode = this.route.snapshot.paramMap.has('keyword');\n      if (this.searchMode) {\n        this.handleSearchProducts();\n      } else {\n        this.handleListProducts();\n      }\n    }\n    /**\r\n     * Within this method, we wil take the JSON Response and we will map it to the fields here in this class.\r\n     * So, all of the Pagination data and so forth will be assigned accordingly.\r\n     */\n    processResult() {\n      return data => {\n        this.products = data._embedded.products; // This is the information coming back from the JSON Response\n        this.thePageNumber = data.page.number + 1;\n        this.thePageSize = data.page.size;\n        this.theTotalElements = data.page.totalElements;\n      };\n    }\n    /**\r\n     * Adding new method called handleSearchProducts().\r\n     * In this, we first need to obtain the actual keyword (\"theKeyword\") that the user passed in,\r\n     * basically reading a parameter. Then, we will search for products using that given\r\n     * keyword.\r\n     */\n    handleSearchProducts() {\n      const theKeyword = this.route.snapshot.paramMap.get('keyword'); // Note the Exclamation Mark.\n      /**\r\n       * If we have a different keyword than the previousKeyword, then we can set thePageNumber Parameter to 1.\r\n       * We have implemented something similar for the Category IDs when we were making use of listingProducts.\r\n       */\n      if (this.previousKeyword != theKeyword) {\n        this.thePageNumber = 1; // With this, we are basically resetting it if there is a new keyword coming through\n      }\n      // Keeping track of the keyword\n      this.previousKeyword = theKeyword;\n      // Debugging Purpose\n      console.log(`keyword=${theKeyword}, thePageNumber=${this.thePageNumber}`);\n      // Search for Products using theKeyword\n      // this.productService.searchProducts(theKeyword).subscribe(\n      //   data => {\n      //     this.products = data;\n      //   }\n      // );\n      /**\r\n       * Now, we will search for products using the new method and update the previous section (above) code as:\r\n       */\n      this.productService.searchProductsPaginate(this.thePageNumber - 1, this.thePageSize, theKeyword).subscribe(this.processResult() // This will make a call to the processResult() method\n      );\n    }\n    /**\r\n     * Adding new method called handleListProducts().\r\n     * Here, we will check if the \"id\" parameter is available just to know if we can use\r\n     * that value or if we need to use the default value.\r\n     * We will first check if there is a value being passed or not. If there is a value\r\n     * being passed, then we will fetch that value and convert that value into a number. It\r\n     * is possible that the value in the currentCategoryId variable might be a null value, so\r\n     * we will need to use the non-null assertion operator (!) which tells the compiler that\r\n     * the object is not null. This helps in resolving the compiler errors. If there is no\r\n     * value, then we will return the default value.\r\n     * After this, we will obtain the products for that value of the Category ID. For this,\r\n     * we will pass the this.currentCategoryId to the getProductList() method which is mapped\r\n     * to product.service.ts file.\r\n     *\r\n     *\r\n     * For the Concept of Pagination, we will have to check if we have a different category than\r\n     * previous.\r\n     * NOTE: Angular will reuse a component if it is currently being viewed. Angular may not always\r\n     *       create a new component everytime. If a component is currently being used in the browser,\r\n     *       then Angular will simply reuse that component, so to handle it we will need to perform\r\n     *       some additional operations.\r\n     *       This needs to be done to reset the page number or if resetting the page number is required.\r\n     *       If we have a different Category ID, then we will reset the Page Number to 1.\r\n     */\n    handleListProducts() {\n      // obtaining the passed value\n      const hasCategoryId = this.route.snapshot.paramMap.has('id'); // This will return true if the parameter is available.\n      // checking based on the boolean value obtained above\n      if (hasCategoryId) {\n        // reading the Category ID and then converting it to a number using the \"+\" symbol\n        this.currentCategoryId = +this.route.snapshot.paramMap.get('id');\n      } else {\n        // since the Category ID is not available, we will return the default value of 1\n        this.currentCategoryId = 1;\n      }\n      // If we have a different Category ID, then we will reset the Page Number to 1.\n      if (this.previousCategoryId != this.currentCategoryId) {\n        this.thePageNumber = 1;\n      }\n      // Now, we need to keep track of the Category ID.\n      this.previousCategoryId = this.currentCategoryId;\n      console.log(`currentCategoryId=${this.currentCategoryId}, thePageNumber=${this.thePageNumber}`);\n      // Now, we need to obtain the products for the given Category ID by calling the service getProductListPaginate() as:\n      //  Calling the ProductService and subscribing to the data.\n      //  Fetching the products for the given Category ID.\n      this.productService.getProductListPaginate(this.thePageNumber - 1,\n      // This is required because in Angular, pages are 1-based whereas in Spring Boot, pages are 0-based\n      this.thePageSize, this.currentCategoryId).subscribe(\n      // Mapping data from the JSON Data to the Property Response\n      // data => {\n      //   /**\n      //    * In this, on the LHS, we have the properties defined in the class and in the RHS, we have the data from Spring Data REST JSON\n      //    * which is from the Interface GetResponseProducts.\n      //    */\n      //   this.products = data._embedded.products;\n      //   this.thePageNumber = data.page.number + 1; // This is required because in Angular, pages are 1-based whereas in Spring Boot, pages are 0-based\n      //   this.thePageSize = data.page.size;\n      //   this.theTotalElements = data.page.totalElements;\n      // }\n      // Refactoring the above code with the below reusable method\n      this.processResult());\n    }\n    /**\r\n     *\r\n     * @param pageSize represents the Page Size selected by the User.\r\n     * The below method will change the number of products displayed to the same number passed in the parameter.\r\n     */\n    updatePageSize(pageSize) {\n      this.thePageSize = +pageSize;\n      this.thePageNumber = 1;\n      this.listProducts(); // This will refresh the PageView based the number of products selected.\n    }\n\n    addToCart(theProduct) {\n      console.log(`Adding to Cart: ${theProduct.name}, ${theProduct.unitPrice} `);\n      // Logic....\n    }\n    static #_ = this.ɵfac = function ProductListComponent_Factory(t) {\n      return new (t || ProductListComponent)(i0.ɵɵdirectiveInject(i1.ProductService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProductListComponent,\n      selectors: [[\"app-product-list\"]],\n      decls: 26,\n      vars: 7,\n      consts: [[1, \"main-content\"], [1, \"section-content\", \"section-content-p30\"], [1, \"container-fluid\"], [1, \"row\"], [\"class\", \"col-md-3\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"alert alert-warning col-md-12\", \"role\", \"alert\", 4, \"ngIf\"], [1, \"footer-pagination\"], [1, \"col-md-6\"], [1, \"col-md-9\", 2, \"padding-left\", \"30%\"], [3, \"page\", \"pageSize\", \"maxSize\", \"boundaryLinks\", \"collectionSize\", \"pageChange\"], [1, \"col-md-3\", \"mt-2\", 2, \"text-align\", \"right\"], [1, \"mr-2\"], [3, \"change\"], [\"myPageSelect\", \"\"], [\"selected\", \"true\"], [1, \"col-md-3\"], [1, \"product-box\"], [3, \"routerLink\"], [1, \"img-responsive\", 3, \"src\"], [1, \"price\"], [1, \"primary-btn\", 3, \"click\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\", \"col-md-12\"]],\n      template: function ProductListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r6 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n          i0.ɵɵtemplate(4, ProductListComponent_div_4_Template, 12, 8, \"div\", 4);\n          i0.ɵɵtemplate(5, ProductListComponent_div_5_Template, 2, 0, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 6)(7, \"div\", 3);\n          i0.ɵɵelement(8, \"div\", 7);\n          i0.ɵɵelementStart(9, \"div\", 7)(10, \"div\", 3)(11, \"div\", 8)(12, \"ngb-pagination\", 9);\n          i0.ɵɵlistener(\"pageChange\", function ProductListComponent_Template_ngb_pagination_pageChange_12_listener($event) {\n            return ctx.thePageNumber = $event;\n          })(\"pageChange\", function ProductListComponent_Template_ngb_pagination_pageChange_12_listener() {\n            return ctx.listProducts();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 10)(14, \"span\", 11);\n          i0.ɵɵtext(15, \"Page Size\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"select\", 12, 13);\n          i0.ɵɵlistener(\"change\", function ProductListComponent_Template_select_change_16_listener() {\n            i0.ɵɵrestoreView(_r6);\n            const _r2 = i0.ɵɵreference(17);\n            return i0.ɵɵresetView(ctx.updatePageSize(_r2.value));\n          });\n          i0.ɵɵelementStart(18, \"option\", 14);\n          i0.ɵɵtext(19, \"5\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"option\");\n          i0.ɵɵtext(21, \"10\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"option\");\n          i0.ɵɵtext(23, \"20\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"option\");\n          i0.ɵɵtext(25, \"50\");\n          i0.ɵɵelementEnd()()()()()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.products);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.products == null ? null : ctx.products.length) == 0);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"page\", ctx.thePageNumber)(\"pageSize\", ctx.thePageSize)(\"maxSize\", 5)(\"boundaryLinks\", true)(\"collectionSize\", ctx.theTotalElements);\n        }\n      },\n      dependencies: [i2.RouterLink, i3.NgForOf, i3.NgIf, i4.NgbPagination, i3.CurrencyPipe]\n    });\n  }\n  return ProductListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}